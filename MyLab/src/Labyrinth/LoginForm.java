package Labyrinth;

import java.awt.Color;
import java.awt.Cursor;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

public class LoginForm extends javax.swing.JFrame {
    
    /* All variables all necessary to connect with mySql database */
    // static final String variable (constant)
    private static final String DRIVER_CLASS = "com.mysql.jdbc.Driver";
    private static final String SERVER_ADDRESS = "jdbc:mysql://sql8.freemysqlhosting.net:3306/sql8141017";
    private static final String USER = "sql8141017";
    private static final String PASSWORD = "uF3rYuJ1YG";
    // object to connect with database
    private Connection con = null;
    // statement with sql query
    private PreparedStatement preparedStatement = null;
    // result set received by executing sql query
    private ResultSet rs = null;
    
    /* Creates new form LoginForm */
    public LoginForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLogin = new javax.swing.JPanel();
        pfPassword = new javax.swing.JPasswordField();
        lblPassword = new javax.swing.JLabel();
        lblNickName = new javax.swing.JLabel();
        lblRegisterNewPlayer = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnLogin = new javax.swing.JButton();
        txtNick = new javax.swing.JTextField();
        lblLoginImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(750, 750));
        setMinimumSize(new java.awt.Dimension(750, 650));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(750, 650));
        setResizable(false);
        getContentPane().setLayout(null);

        pnlLogin.setBackground(new java.awt.Color(255, 255, 153));
        pnlLogin.setOpaque(false);

        pfPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pfPasswordActionPerformed(evt);
            }
        });

        lblPassword.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblPassword.setForeground(new java.awt.Color(102, 102, 102));
        lblPassword.setText("Password");

        lblNickName.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblNickName.setForeground(new java.awt.Color(102, 102, 102));
        lblNickName.setText("Nick name");

        lblRegisterNewPlayer.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRegisterNewPlayer.setForeground(java.awt.SystemColor.textHighlight);
        lblRegisterNewPlayer.setText("or register New Player, click here");
        lblRegisterNewPlayer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRegisterNewPlayerMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblRegisterNewPlayerMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblRegisterNewPlayerMouseExited(evt);
            }
        });

        btnCancel.setText("Exit");
        btnCancel.setName(""); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnLogin.setText("Login");
        btnLogin.setName(""); // NOI18N
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlLoginLayout = new javax.swing.GroupLayout(pnlLogin);
        pnlLogin.setLayout(pnlLoginLayout);
        pnlLoginLayout.setHorizontalGroup(
            pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlLoginLayout.createSequentialGroup()
                        .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNickName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPassword, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pfPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(txtNick)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlLoginLayout.createSequentialGroup()
                        .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblRegisterNewPlayer))
                .addGap(34, 34, 34))
        );
        pnlLoginLayout.setVerticalGroup(
            pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLayout.createSequentialGroup()
                .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoginLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlLoginLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNickName)
                            .addGroup(pnlLoginLayout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(lblPassword))
                            .addComponent(txtNick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLogin)
                    .addComponent(btnCancel))
                .addGap(18, 18, 18)
                .addComponent(lblRegisterNewPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        getContentPane().add(pnlLogin);
        pnlLogin.setBounds(230, 200, 280, 210);

        lblLoginImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MyLabResources/loginImage750x650.jpg"))); // NOI18N
        lblLoginImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLoginImage.setMaximumSize(new java.awt.Dimension(750, 650));
        lblLoginImage.setMinimumSize(new java.awt.Dimension(750, 650));
        lblLoginImage.setPreferredSize(new java.awt.Dimension(750, 650));
        getContentPane().add(lblLoginImage);
        lblLoginImage.setBounds(0, 0, 750, 650);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // close current application
        System.exit(0);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void lblRegisterNewPlayerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRegisterNewPlayerMouseClicked
        // close current form (login form)
        this.dispose();
        // create new form register new when user clikcs on lblRegisterNewPlayer
        new RegisterForm().setVisible(true);
    }//GEN-LAST:event_lblRegisterNewPlayerMouseClicked

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        loginUser();
    }//GEN-LAST:event_btnLoginActionPerformed

    private void lblRegisterNewPlayerMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRegisterNewPlayerMouseExited
        // change cursor for default and color when mouse cursor leaves lblRegisterNewPlayer
        this.setCursor(Cursor.getDefaultCursor());
        // make new object of class Color
        Color hyperLinkColor = new Color(51, 153, 255);
        lblRegisterNewPlayer.setForeground(hyperLinkColor);
    }//GEN-LAST:event_lblRegisterNewPlayerMouseExited

    private void lblRegisterNewPlayerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRegisterNewPlayerMouseEntered
        // change cursor for HAND_CURSOR and color when mouse cursor enters lblRegisterNewPlayer
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        lblRegisterNewPlayer.setForeground(Color.red);
    }//GEN-LAST:event_lblRegisterNewPlayerMouseEntered

    // when user press enter on password field
    private void pfPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pfPasswordActionPerformed
        loginUser();
    }//GEN-LAST:event_pfPasswordActionPerformed

    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new LoginForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnLogin;
    private javax.swing.JLabel lblLoginImage;
    private javax.swing.JLabel lblNickName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRegisterNewPlayer;
    private javax.swing.JPasswordField pfPassword;
    private javax.swing.JPanel pnlLogin;
    private javax.swing.JTextField txtNick;
    // End of variables declaration//GEN-END:variables

    private void loginUser() {
        // number of rows from results query (while loop)
        int rows = 0;

        // this variables will keep the user nick and password from database
        String userNickFromDatabase = null;
        String userPasswordFromDatabase = null;
        String userCharacterFromDatabase = null;
        Boolean isPasswordEqual = false;

        /* Connector JAR file needs to be included in the client project’s
	* class path. The statement Class.forName (“com.mysql.jdbc.driver”)
	* loads the MySQL Java driver class in memory.
        * 
        /* If nick name is empty or passowrd is long less than 1, show message
        * informing player about need to type login and password */
        if (txtNick.getText().isEmpty() || pfPassword.getPassword().length < 1) {
            JOptionPane.showMessageDialog(null, "You didn't type in nick name or password");
        } // if nick and password is not empty
        else {
            try {
                // establish java mySQL connection
                Class.forName(DRIVER_CLASS).newInstance();
                con = DriverManager.getConnection(SERVER_ADDRESS, USER, PASSWORD);

                /* create variable String query as sql query to database
             * This query will find a record where login is given in txtNick
             * Use preparedStatement method to insert data
                 */
                String query = "select * from playersinfo where nick=?";

                preparedStatement = con.prepareStatement(query);
                // parameter used to avoid data breach using sql injections method
                preparedStatement.setString(1, txtNick.getText());

                // execute insert SQL stetement
                rs = preparedStatement.executeQuery();
                /* extract data from result and assign in to the variables 
             * There supposed to be only one record in results if login
             * is already in database. If not 0 rows in effect.
             * This is my validation if login is in database.
                 */
                while (rs.next()) {
                    userNickFromDatabase = rs.getString("nick");
                    userPasswordFromDatabase = rs.getString("password");
                    userCharacterFromDatabase = rs.getString("character");
                    rows++;
                }

                // if rows equal 0, incorrect nick (query found no rows with given nick)
                if (rows < 1) {
                    JOptionPane.showMessageDialog(null, "Incorrect Nick or Password!", "Error", 0);
                    txtNick.requestFocusInWindow();
                } else {
                    // convert pfPassword value which is char to string
                    String tempPassword = new String(pfPassword.getPassword());

                    // check if password from database is the same as given by user during the login process
                    if (tempPassword.equals(userPasswordFromDatabase)) {
                        isPasswordEqual = true;
                    } else {
                        // display message to user
                        JOptionPane.showMessageDialog(null, "Incorrect Password!", "Error", 0);
                        isPasswordEqual = false;
                        pfPassword.setText("");
                        pfPassword.requestFocusInWindow();
                    }
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Communications link failure. Check the connection with Internet, please.", "Network error", 0);
                e.printStackTrace(System.out);
            } finally {

                /* In the finally block, the result set, statement, and connection
             * are all explicitly closed. This is a VERY good practice to follow
             * so that database connections do not get leaked when you write
             * JDBC code.
                 */
                // dispose result set 'rs'
                try {
                    if (rs != null) {
                        rs.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace(System.out);
                }
                // dispose prepared statement
                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace(System.out);
                }

                // dispose connection 'con'
                try {
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace(System.out);
                }
            }

            // if database password is equal to given the password by user 
            if (isPasswordEqual) {
                // new main form where user's nick and character are passed by constructor
                new MainForm(userNickFromDatabase, userCharacterFromDatabase).setVisible(true);
                // close the login form
                this.dispose();

                /* Other way to pass user's nick to MainForm class 
                 * by method setUser
                 * create new main form, pass the nick value, display new form
            
                MainForm mainForm = new MainForm(userNickFromDatabase);
                MainForm.setUser(userNickFromDatabase);
                MainForm.setVisible(true);
                 */
            }
        }
    }
}
